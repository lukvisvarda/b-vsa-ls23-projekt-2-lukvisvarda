/*
 * B-VSA Semestrálny Projekt 2
 * Špecifikácia REST webových služieb slúžia pre detailný opis požadovanej funkcionality pre Semestrálny Projekt 2  v rámci predmetu B-VSA akademický rok 2022/2023.  Pre dopyty na väčšinu služieb (okrem createStudent a createTeacher) je potrebné byť prihlásený. Služby pracujú s Basic autentifikáciou. Každý študent a učiteľ je používateľ systému, ktorý sa môže prihlásiť. Niektoré služby vyžadujú autorizáciu/oprávnenie pre ich dopyt. Služba, ktorá je obmedzená oprávneniami, to má uvedené v popise služby.  Ak služba má vrátiť jeden objekt a nie je nájdený namiesto hodnoty null vráti odpoveď 404. V prípade nečakanej chyby má byť odpoveď s kódom 500 a v správe dôvod vzniku chyby (správa zo vzniknutej Exception). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnyOfobjectobject;
import org.openapitools.client.model.CreateThesisRequest;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Thesis;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ThesisApi {
    private ApiClient localVarApiClient;

    public ThesisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ThesisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for assignThesis
     * @param id  (required)
     * @param inlineObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorá bola priradená študentovi. Vrátený objekt má obsahovať aj objekt študenta priradeného k prácu. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignThesisCall(Long id, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/api/theses/{id}/assign"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignThesisValidateBeforeCall(Long id, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling assignThesis(Async)");
        }
        

        okhttp3.Call localVarCall = assignThesisCall(id, inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Assign a thesis by id to a student
     * Priradenie záverečnej práce podľa identifikátora študentovi. Ak je prihlásený študent v dopyte je práca priradená jemu. Ak je prihlásený učiteľ je práca priradená študentovi podľa identifikátora v objekte tele dopytu. 
     * @param id  (required)
     * @param inlineObject  (optional)
     * @return Thesis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorá bola priradená študentovi. Vrátený objekt má obsahovať aj objekt študenta priradeného k prácu. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public Thesis assignThesis(Long id, InlineObject inlineObject) throws ApiException {
        ApiResponse<Thesis> localVarResp = assignThesisWithHttpInfo(id, inlineObject);
        return localVarResp.getData();
    }

    /**
     * Assign a thesis by id to a student
     * Priradenie záverečnej práce podľa identifikátora študentovi. Ak je prihlásený študent v dopyte je práca priradená jemu. Ak je prihlásený učiteľ je práca priradená študentovi podľa identifikátora v objekte tele dopytu. 
     * @param id  (required)
     * @param inlineObject  (optional)
     * @return ApiResponse&lt;Thesis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorá bola priradená študentovi. Vrátený objekt má obsahovať aj objekt študenta priradeného k prácu. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Thesis> assignThesisWithHttpInfo(Long id, InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = assignThesisValidateBeforeCall(id, inlineObject, null);
        Type localVarReturnType = new TypeToken<Thesis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign a thesis by id to a student (asynchronously)
     * Priradenie záverečnej práce podľa identifikátora študentovi. Ak je prihlásený študent v dopyte je práca priradená jemu. Ak je prihlásený učiteľ je práca priradená študentovi podľa identifikátora v objekte tele dopytu. 
     * @param id  (required)
     * @param inlineObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorá bola priradená študentovi. Vrátený objekt má obsahovať aj objekt študenta priradeného k prácu. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignThesisAsync(Long id, InlineObject inlineObject, final ApiCallback<Thesis> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignThesisValidateBeforeCall(id, inlineObject, _callback);
        Type localVarReturnType = new TypeToken<Thesis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createThesis
     * @param thesis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objekt novo vytvorenej záverečnej práce. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createThesisCall(Thesis thesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = thesis;

        // create path and map variables
        String localVarPath = "/api/theses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createThesisValidateBeforeCall(Thesis thesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'thesis' is set
        if (thesis == null) {
            throw new ApiException("Missing the required parameter 'thesis' when calling createThesis(Async)");
        }
        

        okhttp3.Call localVarCall = createThesisCall(thesis, _callback);
        return localVarCall;

    }

    /**
     * Create new thesis
     * Vytvorenie záverečnej práce. Vytvoriť záverečnú prácu môže iba učiteľ.  Vytvorená záverečná práca je vytvorená pod prihláseným učiteľom. 
     * @param thesis  (required)
     * @return CreateThesisRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objekt novo vytvorenej záverečnej práce. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateThesisRequest createThesis(Thesis thesis) throws ApiException {
        ApiResponse<CreateThesisRequest> localVarResp = createThesisWithHttpInfo(thesis);
        return localVarResp.getData();
    }

    /**
     * Create new thesis
     * Vytvorenie záverečnej práce. Vytvoriť záverečnú prácu môže iba učiteľ.  Vytvorená záverečná práca je vytvorená pod prihláseným učiteľom. 
     * @param thesis  (required)
     * @return ApiResponse&lt;CreateThesisRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objekt novo vytvorenej záverečnej práce. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateThesisRequest> createThesisWithHttpInfo(Thesis thesis) throws ApiException {
        okhttp3.Call localVarCall = createThesisValidateBeforeCall(thesis, null);
        Type localVarReturnType = new TypeToken<CreateThesisRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new thesis (asynchronously)
     * Vytvorenie záverečnej práce. Vytvoriť záverečnú prácu môže iba učiteľ.  Vytvorená záverečná práca je vytvorená pod prihláseným učiteľom. 
     * @param thesis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objekt novo vytvorenej záverečnej práce. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createThesisAsync(Thesis thesis, final ApiCallback<CreateThesisRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createThesisValidateBeforeCall(thesis, _callback);
        Type localVarReturnType = new TypeToken<CreateThesisRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteThesis
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorý bola vymazaná. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteThesisCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/theses/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThesisValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteThesis(Async)");
        }
        

        okhttp3.Call localVarCall = deleteThesisCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a thesis by id
     * Vymazanie záverečnej práce podľa identifikátora. Vymazať prácu môže iba prihlásený učiteľ, ktorý prácu vypísal. 
     * @param id  (required)
     * @return Thesis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorý bola vymazaná. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public Thesis deleteThesis(Long id) throws ApiException {
        ApiResponse<Thesis> localVarResp = deleteThesisWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a thesis by id
     * Vymazanie záverečnej práce podľa identifikátora. Vymazať prácu môže iba prihlásený učiteľ, ktorý prácu vypísal. 
     * @param id  (required)
     * @return ApiResponse&lt;Thesis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorý bola vymazaná. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Thesis> deleteThesisWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteThesisValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Thesis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a thesis by id (asynchronously)
     * Vymazanie záverečnej práce podľa identifikátora. Vymazať prácu môže iba prihlásený učiteľ, ktorý prácu vypísal. 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorý bola vymazaná. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteThesisAsync(Long id, final ApiCallback<Thesis> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThesisValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Thesis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllTheses
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam všetkých záverečných prác v systéme. Ak nie sú vypísané žiadne práce je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllThesesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/theses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllThesesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllThesesCall(_callback);
        return localVarCall;

    }

    /**
     * Get all theses
     * Získanie zoznamu záverečných prác.
     * @return List&lt;Thesis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam všetkých záverečných prác v systéme. Ak nie sú vypísané žiadne práce je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public List<Thesis> getAllTheses() throws ApiException {
        ApiResponse<List<Thesis>> localVarResp = getAllThesesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all theses
     * Získanie zoznamu záverečných prác.
     * @return ApiResponse&lt;List&lt;Thesis&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam všetkých záverečných prác v systéme. Ak nie sú vypísané žiadne práce je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Thesis>> getAllThesesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllThesesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Thesis>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all theses (asynchronously)
     * Získanie zoznamu záverečných prác.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam všetkých záverečných prác v systéme. Ak nie sú vypísané žiadne práce je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllThesesAsync(final ApiCallback<List<Thesis>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllThesesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Thesis>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThesis
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce so zadaným identifikátorom.  V prípade, že taká záverečná práca neexistuje, tak je vrátená odpoveď 404.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThesisCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/theses/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThesisValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getThesis(Async)");
        }
        

        okhttp3.Call localVarCall = getThesisCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a thesis by id
     * Získanie záverečnej práce podľa identifikátora.
     * @param id  (required)
     * @return Thesis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce so zadaným identifikátorom.  V prípade, že taká záverečná práca neexistuje, tak je vrátená odpoveď 404.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public Thesis getThesis(Long id) throws ApiException {
        ApiResponse<Thesis> localVarResp = getThesisWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a thesis by id
     * Získanie záverečnej práce podľa identifikátora.
     * @param id  (required)
     * @return ApiResponse&lt;Thesis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce so zadaným identifikátorom.  V prípade, že taká záverečná práca neexistuje, tak je vrátená odpoveď 404.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Thesis> getThesisWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getThesisValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Thesis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a thesis by id (asynchronously)
     * Získanie záverečnej práce podľa identifikátora.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce so zadaným identifikátorom.  V prípade, že taká záverečná práca neexistuje, tak je vrátená odpoveď 404.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThesisAsync(Long id, final ApiCallback<Thesis> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThesisValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Thesis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTheses
     * @param UNKNOWN_BASE_TYPE Telo dopytu je jeden z možných objektov. Buď sú práce vyhľadané podľa priradeného študenta,  alebo podľa učiteľa, ktorý vypísal záverečnú prácu.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam záverečných prác vyhovujúcich kritériu. Ak nie sú vypísané žiadne práce je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchThesesCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/api/search/theses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchThesesValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchThesesCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Search theses by a teacher or a student
     * Vyhľadanie záverečnej práce na základe kritérií tela dopytu.
     * @param UNKNOWN_BASE_TYPE Telo dopytu je jeden z možných objektov. Buď sú práce vyhľadané podľa priradeného študenta,  alebo podľa učiteľa, ktorý vypísal záverečnú prácu.  (optional)
     * @return List&lt;Thesis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam záverečných prác vyhovujúcich kritériu. Ak nie sú vypísané žiadne práce je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public List<Thesis> searchTheses(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<List<Thesis>> localVarResp = searchThesesWithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Search theses by a teacher or a student
     * Vyhľadanie záverečnej práce na základe kritérií tela dopytu.
     * @param UNKNOWN_BASE_TYPE Telo dopytu je jeden z možných objektov. Buď sú práce vyhľadané podľa priradeného študenta,  alebo podľa učiteľa, ktorý vypísal záverečnú prácu.  (optional)
     * @return ApiResponse&lt;List&lt;Thesis&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam záverečných prác vyhovujúcich kritériu. Ak nie sú vypísané žiadne práce je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Thesis>> searchThesesWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = searchThesesValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<List<Thesis>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search theses by a teacher or a student (asynchronously)
     * Vyhľadanie záverečnej práce na základe kritérií tela dopytu.
     * @param UNKNOWN_BASE_TYPE Telo dopytu je jeden z možných objektov. Buď sú práce vyhľadané podľa priradeného študenta,  alebo podľa učiteľa, ktorý vypísal záverečnú prácu.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam záverečných prác vyhovujúcich kritériu. Ak nie sú vypísané žiadne práce je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchThesesAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<List<Thesis>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchThesesValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<List<Thesis>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitThesis
     * @param id  (required)
     * @param inlineObject1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorá bola odovzdaná študentom. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitThesisCall(Long id, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/api/theses/{id}/submit"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitThesisValidateBeforeCall(Long id, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling submitThesis(Async)");
        }
        

        okhttp3.Call localVarCall = submitThesisCall(id, inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Submit a thesis by id assigned to a student
     * Odovzdanie záverečnej práce podľa identifikátora. Ak je prihlásený študent v dopyte musí sa zhodovať so študentom priradeného k práci. Ak je prihlásený učiteľ je práca odovzdaná študentom podľa identifikátora v objekte tele dopytu, ktorý sa musí zhodovať so študentom priradeného k prác. 
     * @param id  (required)
     * @param inlineObject1  (optional)
     * @return Thesis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorá bola odovzdaná študentom. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public Thesis submitThesis(Long id, InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<Thesis> localVarResp = submitThesisWithHttpInfo(id, inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Submit a thesis by id assigned to a student
     * Odovzdanie záverečnej práce podľa identifikátora. Ak je prihlásený študent v dopyte musí sa zhodovať so študentom priradeného k práci. Ak je prihlásený učiteľ je práca odovzdaná študentom podľa identifikátora v objekte tele dopytu, ktorý sa musí zhodovať so študentom priradeného k prác. 
     * @param id  (required)
     * @param inlineObject1  (optional)
     * @return ApiResponse&lt;Thesis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorá bola odovzdaná študentom. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Thesis> submitThesisWithHttpInfo(Long id, InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = submitThesisValidateBeforeCall(id, inlineObject1, null);
        Type localVarReturnType = new TypeToken<Thesis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a thesis by id assigned to a student (asynchronously)
     * Odovzdanie záverečnej práce podľa identifikátora. Ak je prihlásený študent v dopyte musí sa zhodovať so študentom priradeného k práci. Ak je prihlásený učiteľ je práca odovzdaná študentom podľa identifikátora v objekte tele dopytu, ktorý sa musí zhodovať so študentom priradeného k prác. 
     * @param id  (required)
     * @param inlineObject1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt záverečnej práce, ktorá bola odovzdaná študentom. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitThesisAsync(Long id, InlineObject1 inlineObject1, final ApiCallback<Thesis> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitThesisValidateBeforeCall(id, inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<Thesis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
