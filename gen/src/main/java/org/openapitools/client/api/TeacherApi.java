/*
 * B-VSA Semestrálny Projekt 2
 * Špecifikácia REST webových služieb slúžia pre detailný opis požadovanej funkcionality pre Semestrálny Projekt 2  v rámci predmetu B-VSA akademický rok 2022/2023.  Pre dopyty na väčšinu služieb (okrem createStudent a createTeacher) je potrebné byť prihlásený. Služby pracujú s Basic autentifikáciou. Každý študent a učiteľ je používateľ systému, ktorý sa môže prihlásiť. Niektoré služby vyžadujú autorizáciu/oprávnenie pre ich dopyt. Služba, ktorá je obmedzená oprávneniami, to má uvedené v popise služby.  Ak služba má vrátiť jeden objekt a nie je nájdený namiesto hodnoty null vráti odpoveď 404. V prípade nečakanej chyby má byť odpoveď s kódom 500 a v správe dôvod vzniku chyby (správa zo vzniknutej Exception). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateTeacherRequest;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Teacher;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeacherApi {
    private ApiClient localVarApiClient;

    public TeacherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeacherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTeacher
     * @param createTeacherRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objekt novo vytvoreného učiteľa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeacherCall(CreateTeacherRequest createTeacherRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createTeacherRequest;

        // create path and map variables
        String localVarPath = "/api/teachers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeacherValidateBeforeCall(CreateTeacherRequest createTeacherRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createTeacherRequest' is set
        if (createTeacherRequest == null) {
            throw new ApiException("Missing the required parameter 'createTeacherRequest' when calling createTeacher(Async)");
        }
        

        okhttp3.Call localVarCall = createTeacherCall(createTeacherRequest, _callback);
        return localVarCall;

    }

    /**
     * Create new teacher
     * Vytvorenie nového učiteľa. Po vytvorení je možné sa prihlásiť ako novo registrovaný učiteľ. Služba je verejne dostupná bez prihlásenia. 
     * @param createTeacherRequest  (required)
     * @return Teacher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objekt novo vytvoreného učiteľa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public Teacher createTeacher(CreateTeacherRequest createTeacherRequest) throws ApiException {
        ApiResponse<Teacher> localVarResp = createTeacherWithHttpInfo(createTeacherRequest);
        return localVarResp.getData();
    }

    /**
     * Create new teacher
     * Vytvorenie nového učiteľa. Po vytvorení je možné sa prihlásiť ako novo registrovaný učiteľ. Služba je verejne dostupná bez prihlásenia. 
     * @param createTeacherRequest  (required)
     * @return ApiResponse&lt;Teacher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objekt novo vytvoreného učiteľa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Teacher> createTeacherWithHttpInfo(CreateTeacherRequest createTeacherRequest) throws ApiException {
        okhttp3.Call localVarCall = createTeacherValidateBeforeCall(createTeacherRequest, null);
        Type localVarReturnType = new TypeToken<Teacher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new teacher (asynchronously)
     * Vytvorenie nového učiteľa. Po vytvorení je možné sa prihlásiť ako novo registrovaný učiteľ. Služba je verejne dostupná bez prihlásenia. 
     * @param createTeacherRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objekt novo vytvoreného učiteľa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeacherAsync(CreateTeacherRequest createTeacherRequest, final ApiCallback<Teacher> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeacherValidateBeforeCall(createTeacherRequest, _callback);
        Type localVarReturnType = new TypeToken<Teacher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTeacher
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt študenta ktorý bol vymazaný. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeacherCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teachers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeacherValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTeacher(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTeacherCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a teacher by id
     * Vymazanie učiteľa podľa identifikátora. Vymazať učiteľa môže iba prihlásený učiteľ, ktorého identifikátor sa zhoduje s poskytnutým identifikátorom v dopyte. 
     * @param id  (required)
     * @return Teacher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt študenta ktorý bol vymazaný. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public Teacher deleteTeacher(Long id) throws ApiException {
        ApiResponse<Teacher> localVarResp = deleteTeacherWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a teacher by id
     * Vymazanie učiteľa podľa identifikátora. Vymazať učiteľa môže iba prihlásený učiteľ, ktorého identifikátor sa zhoduje s poskytnutým identifikátorom v dopyte. 
     * @param id  (required)
     * @return ApiResponse&lt;Teacher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt študenta ktorý bol vymazaný. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Teacher> deleteTeacherWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteTeacherValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Teacher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a teacher by id (asynchronously)
     * Vymazanie učiteľa podľa identifikátora. Vymazať učiteľa môže iba prihlásený učiteľ, ktorého identifikátor sa zhoduje s poskytnutým identifikátorom v dopyte. 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt študenta ktorý bol vymazaný. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorized user doesn&#39;t have permission for the request. Autentifikovaný používateľ nemá oprávnenie na dopyt. Kód v odpovedi je vždy 403.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeacherAsync(Long id, final ApiCallback<Teacher> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeacherValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Teacher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllTeachers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam všetkých učiteľov v systéme. Ak v systéme neexistujú žiadny učitelia je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllTeachersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teachers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTeachersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllTeachersCall(_callback);
        return localVarCall;

    }

    /**
     * Get all teachers
     * Získanie zoznamu všetkých učiteľov.
     * @return List&lt;Teacher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam všetkých učiteľov v systéme. Ak v systéme neexistujú žiadny učitelia je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public List<Teacher> getAllTeachers() throws ApiException {
        ApiResponse<List<Teacher>> localVarResp = getAllTeachersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all teachers
     * Získanie zoznamu všetkých učiteľov.
     * @return ApiResponse&lt;List&lt;Teacher&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam všetkých učiteľov v systéme. Ak v systéme neexistujú žiadny učitelia je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Teacher>> getAllTeachersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllTeachersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Teacher>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all teachers (asynchronously)
     * Získanie zoznamu všetkých učiteľov.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zoznam všetkých učiteľov v systéme. Ak v systéme neexistujú žiadny učitelia je vrátený prázdny zoznam. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllTeachersAsync(final ApiCallback<List<Teacher>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTeachersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Teacher>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeacher
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt učiteľa so zadaným identifikátorom. V prípade, že taký študent neexistuje tak je vrátená odpoveď 404. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeacherCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teachers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeacherValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTeacher(Async)");
        }
        

        okhttp3.Call localVarCall = getTeacherCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a teacher by id
     * Získanie učiteľa podľa identifikátora.
     * @param id  (required)
     * @return Teacher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt učiteľa so zadaným identifikátorom. V prípade, že taký študent neexistuje tak je vrátená odpoveď 404. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public Teacher getTeacher(Long id) throws ApiException {
        ApiResponse<Teacher> localVarResp = getTeacherWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a teacher by id
     * Získanie učiteľa podľa identifikátora.
     * @param id  (required)
     * @return ApiResponse&lt;Teacher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt učiteľa so zadaným identifikátorom. V prípade, že taký študent neexistuje tak je vrátená odpoveď 404. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Teacher> getTeacherWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getTeacherValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Teacher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a teacher by id (asynchronously)
     * Získanie učiteľa podľa identifikátora.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Objekt učiteľa so zadaným identifikátorom. V prípade, že taký študent neexistuje tak je vrátená odpoveď 404. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request.  Dopyt musí byt autorizovaný platnou autentifikačnou schémou. Kód v odpovedi je vždy 401.  </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested resource was not found. Objekt nebolo možné nájsť. Kód v odpovedi je vždy 404.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Nepredvídateľná chyba na servery pri spracovaní dopytu. Kód v odpovedi je vždy 500.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeacherAsync(Long id, final ApiCallback<Teacher> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeacherValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Teacher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
